# Unified Comparison Framework Configuration
# This file defines all parameters for fair algorithm comparison

# Algorithms to compare
algorithms:
  # DQN Variants (Ablation Study)
  dqn_vanilla:
    type: "dqn"
    components:
      action_mask: false
      safety: false
      constraint: false
      reward_shaping: false
    
  dqn_reward:
    type: "dqn"
    components:
      action_mask: false
      safety: false
      constraint: false
      reward_shaping: true
      
  dqn_mask:
    type: "dqn"
    components:
      action_mask: true
      safety: false
      constraint: false
      reward_shaping: false
      
  dqn_full:
    type: "dqn"
    components:
      action_mask: true
      safety: true
      constraint: true
      reward_shaping: true
      
  # Advanced RL Algorithms
  double_dqn:
    type: "advanced_rl"
    class: "DoubleDQNAgent"
    
  dueling_dqn:
    type: "advanced_rl"
    class: "DuelingDQNAgent"
    
  # Traditional Heuristic Algorithms
  greedy:
    type: "heuristic"
    class: "GreedyAgent"
    
  rule_based:
    type: "heuristic"
    class: "RuleBasedAgent"
    
  # Path Planning Algorithms
  shortest_path:
    type: "path_planning"
    class: "ShortestPathAgent"
    
  # Optimization Algorithms
  genetic_algorithm:
    type: "optimization"
    class: "GeneticAlgorithmAgent"
    
  priority_based:
    type: "priority"
    class: "PriorityAgent"
    
  # Baseline
  random:
    type: "baseline"
    class: "RandomAgent"

# Environment configurations
environments:
  - "config_5.json"   # Simple: 5 locations
  - "config_8.json"   # Medium: 8 locations  
  - "config_10.json"  # Complex: 10 locations
  - "config_15.json"  # Large: 15 locations
  - "config_20.json"  # Very Large: 20 locations

# Training parameters (unified across all RL algorithms)
training:
  episodes: 2000              # Training episodes
  batch_size: 64              # Batch size for RL algorithms
  learning_rate: 0.001        # Learning rate
  epsilon_start: 1.0          # Initial exploration rate
  epsilon_end: 0.02           # Final exploration rate
  epsilon_decay: 0.995        # Exploration decay rate
  target_update_freq: 100     # Target network update frequency
  memory_capacity: 10000      # Experience replay buffer size
  gamma: 0.99                 # Discount factor

# Evaluation parameters
evaluation:
  episodes: 500               # Training evaluation episodes
  final_eval_episodes: 100    # Final evaluation episodes
  seeds: [42, 123, 456]       # Random seeds for reproducibility
  
  # Metrics to track
  metrics:
    - "cumulative_reward"
    - "success_rate"
    - "episode_length"
    - "training_time"
    - "constraint_violations"
    - "action_mask_usage"
    - "safety_interventions"

# Weather condition variations (for robustness testing)
weather_variations:
  stable:
    weather_prob: 0.8
    extreme_weather_prob: 0.05
    
  moderate:
    weather_prob: 0.6
    extreme_weather_prob: 0.10
    
  unstable:
    weather_prob: 0.4
    extreme_weather_prob: 0.20

# Output configuration
output:
  results_dir: "unified_comparison_results"
  save_models: true           # Save trained models
  generate_plots: true        # Generate visualization plots
  statistical_tests: true     # Perform statistical significance tests
  
  # Plot types to generate
  plots:
    - "performance_comparison"
    - "convergence_curves"
    - "scalability_analysis"
    - "robustness_heatmap"
    - "algorithm_ranking"

# Computational resources
resources:
  use_gpu: true
  gpu_memory_limit: 0.8       # Fraction of GPU memory to use
  parallel_evaluation: true   # Run evaluations in parallel when possible
  max_workers: 4              # Maximum number of parallel workers

# Statistical analysis
statistics:
  confidence_level: 0.95      # Confidence level for statistical tests
  multiple_testing_correction: "bonferroni"  # Multiple testing correction method
  effect_size_threshold: 0.5  # Minimum effect size to consider significant

# Experiment tracking
tracking:
  log_level: "INFO"
  save_logs: true
  track_hyperparameters: true
  track_system_metrics: true  # Track CPU, GPU, memory usage